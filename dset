#!/bin/bash
source ~/.shcolor.sh 2>/dev/null || source <(curl -s https://raw.githubusercontent.com/kba/shcolor/master/shcolor.sh|tee ~/.shcolor.sh)

#
# Configuration
#

# Root directory of the repo, default the directory of this script
DIR_ROOT="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
# Set this to the Infolink JAR
INFOLINK_JAR=$DIR_ROOT/infoLink/build/libs/infoLink-1.0.jar
# Datasets subdirectory
DIR_DATASET="$DIR_ROOT/datasets"
# Template subdirectotry
DIR_TEMPLATE="$DIR_ROOT/template"
# Arguments to the CLI call
declare -A JAVA_CLI_ARGS

OPT_DEBUG=true
OPT_FORCE=false
OPT_TO_TEXT=true

#
# Usage
#

usage() {
    if [[ ! -z "$1" ]];then
        echo "`C 1 b`ERROR:`C` $1"
    fi
    echo ""
    echo "  `C 15`$0 `C 2`<cmd>`C` [`C 12`options`C`] [[`C 11`<dataset>`C`] `C 11`<subset> <json>`C`]"
    echo ""
    echo "  Options:"
    echo ""
    echo "    `C 12`--force`C`            overwrite if exists"
    echo "    `C 12`--debug -d`C`         output debug"
    echo "    `C 12`--convert-to-text`C`  convert the data to text before execution"
    echo "    `C 12`--tag <tag>`C`        override tag to be used (default: `C 11`<DATASET>-<SUBSET>-<JSON>-<TIMESTAMP>`C`"
    echo ""
    echo "  Subcommands:"
    echo ""
    echo "  `C 2`init`C 11` <dataset>`C`"
    echo "    Initialize new dataset in directory datasets/<dataset>"
    echo "  `C 2`pre-commit`C 11` <dataset>`C`"
    echo "    Validate conformity before git-commit"
    echo "  `C 2`checksum`C` [`C 12`--force`C`] `C 11`<dataset>`C`"
    echo "    Generate checksum for dataset <dir>"
    echo "  `C 2`to-text`C 11` <dataset> <subset>`C`"
    echo "    Convert the *.pdf in subset `C 11`<subset>`C` of dataset `C 11`<dataset>`C` to text/plain"
    echo "  `C 2`exec`C 11` <dataset> <subset> <json>`C`"
    echo "    Execute an algorithm on data from subset `C 11`<subset>`C` of dataset `C 11`<dataset>`C` using execution `C 11`<json>`C`"
#    echo "  generate-pdfset <dir> <MANIFEST>"
#    echo "      Generate pdf-set  <dir> MANIFEST file"
    exit
}

#
# Helpers
#

die_if_not_exists() {
    actual_file=''
    if [[ ! -z "$2" ]];then
        actual_file="(=$2)"
    fi
    if [[ ! -e "$1" ]];then
        echo "$1 $actual_file does not exist!"
        exit 1
    fi
}
die_if_exists() {
    if [[ -e "$1" ]];then
        echo "$1 already exists!"
        exit 1
    fi
}
die_if_empty() {
    if [[ -z "$1" ]];then
        echo "Argument $2 must not be empty!"
        exit 1;
    fi
}

cd_root() {
    cd $DIR_ROOT
}

cd_dataset() {
    die_if_not_exists "$DIR_DATASET/$DATASET"
    cd "$DIR_DATASET/$DATASET"
}

default_tag() {
    echo "$DATASET-$SUBSET-$JSON-$(date "+%Y-%m-%dT%H:%M:%S")"
}

exec_java() {
    local args=("-jar" "$INFOLINK_JAR")
    if [[ "$OPT_TO_TEXT" == true ]];then
        args+=("--convert-to-text")
    fi
    if [[ ! -z "$TAG" ]];then
        JAVA_CLI_ARGS["--tag"]="$TAG"
    fi
    for arg in "${!JAVA_CLI_ARGS[@]}";do
        args+=("$arg" "${JAVA_CLI_ARGS[$arg]}")
    done
    echo "`C 11`About to execute:`C`"
    echo java "${args[@]}"
    echo "<ENTER> to continue, <CTRL-C> to quit"
    read

    java "${args[@]}"
}


#
# Commands
#

cmd_sha256() {
    cd_dataset
    [[ $OPT_FORCE == true ]] || die_if_exists SHA256SUMS
    echo "Creating SHA256SUMS ..."
    echo "" > SHA256SUMS
    find . \
        -type f \
        -regex './\(pdf\|meta\).*' \
        | xargs \
            -P 10 \
            -n 5 \
            -I{} \
            sha256sum {} >> SHA256SUMS
    cd_root
}

cmd_init() {
    die_if_empty "$DATASET" "<dataset>"
    die_if_exists "$DIR_DATASET/$DATASET" 
    cp -rv $DIR_TEMPLATE "$DIR_DATASET/$DATASET"
    cd_dataset
    sed -i "s/TITLE/$DATASET/" README.md
    cd_root
}

cmd_to_text() {
    die_if_empty "$DATASET" "<dataset>"
    die_if_empty "$SUBSET" "<subset>"
    die_if_not_exists "$DIR_DATASET/$DATASET/subsets/$SUBSET"
    cd_dataset

    JAVA_CLI_ARGS["--pdf-dir"]="$DIR_DATASET/$DATASET/subsets/$SUBSET"
    JAVA_CLI_ARGS["--text-dir"]="$DIR_DATASET/$DATASET/text/$SUBSET"
    JAVA_CLI_ARGS["--db-dir"]="$PWD/db"
    JAVA_CLI_ARGS["--tag"]="to-text"
    exec_java

    cd_root
}

cmd_exec() {
    die_if_empty "$DATASET" "<dataset>"
    die_if_empty "$SUBSET" "<subset>"
    die_if_empty "$JSON" "<json>"
    die_if_empty "$TAG" "<tag>"
    cd_dataset
    die_if_not_exists "$JSON.json" "$PWD/$JSON.json"
    die_if_not_exists "$PWD/subsets/$SUBSET"

    JAVA_CLI_ARGS["--json"]="$PWD/$JSON.json"
    JAVA_CLI_ARGS["--pdf-dir"]="$PWD/subsets/$SUBSET"
    JAVA_CLI_ARGS["--db-dir"]="$PWD/db"
    JAVA_CLI_ARGS["--text-dir"]="$PWD/text/$SUBSET"
    exec_java

    cd_root
}

debug() {
    echo "`C 13`#DEBUG>   `C 2`CMD`C`: $CMD"
    echo "`C 13`#DEBUG>   `C 11`DATASET`C`: $DATASET"
    echo "`C 13`#DEBUG>   `C 11`SUBSET`C`: $SUBSET"
    echo "`C 13`#DEBUG>   `C 11`JSON`C`: $JSON"
    echo "`C 13`#DEBUG>   `C 12`OPT_FORCE`C`: $OPT_FORCE"
    echo "`C 13`#DEBUG>   `C 12`OPT_TO_TEXT`C`: $OPT_TO_TEXT"
    echo "`C 13`#DEBUG>   `C 12`OPT_TAG`C`: $OPT_TAG"
    echo "`C 13`#DEBUG>   `C 12`OPT_DEBUG`C`: $OPT_DEBUG"
    echo "`C 13`#DEBUG>   `C 14`\$@`C`: $@"
}

CMD="$1" && shift
[[ -z "$CMD" ]] && usage "Must specify cmd"

while [[ "$1" =~ ^- ]];do
    case "$1" in 
        --force) 
            OPT_FORCE=true
            ;;
        --tag)
            OPT_TAG=$2;
            shift
            ;;
        --convert-to-text)
            OPT_TO_TEXT=true
            ;;
        --debug|-d)
            OPT_DEBUG=true
            ;;
        *)
            usage "Unknown Option: '$1'"
            ;;
    esac
    shift;
done

case "$CMD" in
    init)
        DATASET="$1" && shift
        [[ -z "$DATASET" ]] && usage "Must specify dataset"
        [[ $OPT_DEBUG == true ]] && debug $@
        cmd_init $@
        ;;
    checksum)
        DATASET="$1" && shift
        [[ -z "$DATASET" ]] && usage "Must specify dataset"
        [[ $OPT_DEBUG == true ]] && debug $@
        cmd_sha256 $@
        ;;
    exec)
        DATASET="$1" && shift
        SUBSET="$1" && shift
        JSON="$1" && shift
        TAG=${OPT_TAG:-$(default_tag)}
        [[ $OPT_DEBUG == true ]] && debug $@
        cmd_exec $@
        ;;
    to-text)
        DATASET="$1" && shift
        SUBSET="$1" && shift
        [[ $OPT_DEBUG == true ]] && debug $@
        cmd_to_text $@
        ;;
    *)
        usage "Unknown command '$CMD'"
        ;;
esac
